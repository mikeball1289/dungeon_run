"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const socketIo = require("socket.io");
const http = require("http");
const express = require("express");
const GameState_1 = require("./GameState");
const Juggler_1 = require("./core/Juggler");
let app = express();
let server = http.createServer(app);
let io = socketIo(server);
// express.static.mime.define( { "text/javascript": ["js"] } );
app.use(express.static("client/dist"));
let game = new GameState_1.GameState();
io.on("connection", (socket) => {
    const id = socket.id;
    console.log(`Connection recieved ${socket.id}`);
    socket.emit("dungeon_params", {
        width: game.world.dungeon.width,
        height: game.world.dungeon.height,
        seed: game.world.dungeon.seed,
    });
    let ackTimer = setTimeout(() => {
        socket.emit("reload");
        socket.disconnect();
    }, 2000);
    socket.on("ack", () => {
        game.addPlayer(id);
        clearTimeout(ackTimer);
        socket.on("controls", (controls) => {
            game.players[id].controls = controls;
        });
        socket.on("_ping", () => socket.emit("_pong"));
    });
    socket.on("disconnect", () => {
        game.removePlayer(id);
        console.log(`Client disconnected ${id}`);
    });
});
let juggler = new Juggler_1.Juggler(60);
juggler.add(() => {
    game = game.update();
    let serial = game.serialize();
    io.emit("state", serial);
});
server.listen(8080, () => console.log("Server started at localhost:8080"));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQXNDO0FBQ3RDLDZCQUE2QjtBQUM3QixtQ0FBbUM7QUFDbkMsMkNBQXdDO0FBRXhDLDRDQUF5QztBQUV6QyxJQUFJLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQztBQUNwQixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3BDLElBQUksRUFBRSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUUxQiwrREFBK0Q7QUFDL0QsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7QUFFdkMsSUFBSSxJQUFJLEdBQUcsSUFBSSxxQkFBUyxFQUFFLENBQUM7QUFFM0IsRUFBRSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRTtJQUMzQixNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDO0lBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRWhELE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQWM7UUFDdEMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUs7UUFDL0IsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU07UUFDakMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUk7S0FDaEMsQ0FBRSxDQUFDO0lBRUosSUFBSSxRQUFRLEdBQUcsVUFBVSxDQUFFLEdBQUcsRUFBRTtRQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN4QixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFVCxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUU7UUFDbEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUVuQixZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFdkIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFrQixFQUFFLEVBQUU7WUFDekMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pDLENBQUMsQ0FBRSxDQUFDO1FBRUosTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBRSxDQUFDO0lBQ3BELENBQUMsQ0FBRSxDQUFDO0lBRUosTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO1FBQ3pCLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM3QyxDQUFDLENBQUUsQ0FBQztBQUNSLENBQUMsQ0FBRSxDQUFDO0FBRUosSUFBSSxPQUFPLEdBQUcsSUFBSSxpQkFBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUUsR0FBRyxFQUFFO0lBQ2QsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNyQixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDOUIsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDN0IsQ0FBQyxDQUFFLENBQUM7QUFFSixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHNvY2tldElvIGZyb20gXCJzb2NrZXQuaW9cIjtcclxuaW1wb3J0ICogYXMgaHR0cCBmcm9tIFwiaHR0cFwiO1xyXG5pbXBvcnQgKiBhcyBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XHJcbmltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuL0dhbWVTdGF0ZVwiO1xyXG5pbXBvcnQgeyBEdW5HZW5PcHRzIH0gZnJvbSBcIi4uL2NvbW1vbi9EdW5HZW5cIjtcclxuaW1wb3J0IHsgSnVnZ2xlciB9IGZyb20gXCIuL2NvcmUvSnVnZ2xlclwiO1xyXG5cclxubGV0IGFwcCA9IGV4cHJlc3MoKTtcclxubGV0IHNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKGFwcCk7XHJcbmxldCBpbyA9IHNvY2tldElvKHNlcnZlcik7XHJcblxyXG4vLyBleHByZXNzLnN0YXRpYy5taW1lLmRlZmluZSggeyBcInRleHQvamF2YXNjcmlwdFwiOiBbXCJqc1wiXSB9ICk7XHJcbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMoXCJjbGllbnQvZGlzdFwiKSk7XHJcblxyXG5sZXQgZ2FtZSA9IG5ldyBHYW1lU3RhdGUoKTtcclxuXHJcbmlvLm9uKFwiY29ubmVjdGlvblwiLCAoc29ja2V0KSA9PiB7XHJcbiAgICBjb25zdCBpZCA9IHNvY2tldC5pZDtcclxuICAgIGNvbnNvbGUubG9nKGBDb25uZWN0aW9uIHJlY2lldmVkICR7c29ja2V0LmlkfWApO1xyXG5cclxuICAgIHNvY2tldC5lbWl0KFwiZHVuZ2Vvbl9wYXJhbXNcIiwgPER1bkdlbk9wdHM+e1xyXG4gICAgICAgIHdpZHRoOiBnYW1lLndvcmxkLmR1bmdlb24ud2lkdGgsXHJcbiAgICAgICAgaGVpZ2h0OiBnYW1lLndvcmxkLmR1bmdlb24uaGVpZ2h0LFxyXG4gICAgICAgIHNlZWQ6IGdhbWUud29ybGQuZHVuZ2Vvbi5zZWVkLFxyXG4gICAgfSApO1xyXG4gICAgXHJcbiAgICBsZXQgYWNrVGltZXIgPSBzZXRUaW1lb3V0KCAoKSA9PiB7XHJcbiAgICAgICAgc29ja2V0LmVtaXQoXCJyZWxvYWRcIik7XHJcbiAgICAgICAgc29ja2V0LmRpc2Nvbm5lY3QoKTtcclxuICAgIH0sIDIwMDApO1xyXG5cclxuICAgIHNvY2tldC5vbihcImFja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgZ2FtZS5hZGRQbGF5ZXIoaWQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNsZWFyVGltZW91dChhY2tUaW1lcik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc29ja2V0Lm9uKFwiY29udHJvbHNcIiwgKGNvbnRyb2xzOiBDb250cm9scykgPT4ge1xyXG4gICAgICAgICAgICBnYW1lLnBsYXllcnNbaWRdLmNvbnRyb2xzID0gY29udHJvbHM7XHJcbiAgICAgICAgfSApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHNvY2tldC5vbihcIl9waW5nXCIsICgpID0+IHNvY2tldC5lbWl0KFwiX3BvbmdcIikgKTtcclxuICAgIH0gKTtcclxuICAgICAgICBcclxuICAgIHNvY2tldC5vbihcImRpc2Nvbm5lY3RcIiwgKCkgPT4ge1xyXG4gICAgICAgIGdhbWUucmVtb3ZlUGxheWVyKGlkKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhgQ2xpZW50IGRpc2Nvbm5lY3RlZCAke2lkfWApO1xyXG4gICAgfSApO1xyXG59ICk7XHJcblxyXG5sZXQganVnZ2xlciA9IG5ldyBKdWdnbGVyKDYwKTtcclxuanVnZ2xlci5hZGQoICgpID0+IHtcclxuICAgIGdhbWUgPSBnYW1lLnVwZGF0ZSgpO1xyXG4gICAgbGV0IHNlcmlhbCA9IGdhbWUuc2VyaWFsaXplKCk7XHJcbiAgICBpby5lbWl0KFwic3RhdGVcIiwgc2VyaWFsKTtcclxufSApO1xyXG5cclxuc2VydmVyLmxpc3Rlbig4MDgwLCAoKSA9PiBjb25zb2xlLmxvZyhcIlNlcnZlciBzdGFydGVkIGF0IGxvY2FsaG9zdDo4MDgwXCIpKTsiXX0=