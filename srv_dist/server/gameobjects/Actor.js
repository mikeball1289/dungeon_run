"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Point_1 = require("../core/Point");
class Actor {
    constructor(size = new Point_1.Point(), position = new Point_1.Point()) {
        this.size = size;
        this.position = position;
        this.velocity = new Point_1.Point();
    }
    serialize() {
        return {
            x: this.x,
            y: this.y,
        };
    }
    get width() {
        return this.size.x;
    }
    set width(v) {
        this.size.x = v;
    }
    get height() {
        return this.size.y;
    }
    set height(v) {
        this.size.y = v;
    }
    get x() {
        return this.position.x;
    }
    set x(v) {
        this.position.x = v;
    }
    get y() {
        return this.position.y;
    }
    set y(v) {
        this.position.y = v;
    }
    get left() {
        return this.position.x - this.width / 2;
    }
    set left(v) {
        this.position.x = v + this.width / 2;
    }
    get right() {
        return this.position.x + this.size.x / 2;
    }
    set right(v) {
        this.position.x = v - this.size.x / 2;
    }
    get top() {
        return this.position.y - this.height;
    }
    set top(v) {
        this.position.y = v + this.height;
    }
    get bottom() {
        return this.position.y;
    }
    set bottom(v) {
        this.position.y = v;
    }
    get horizontalCenter() {
        return this.position.x;
    }
    set horizontalCenter(v) {
        this.position.x = v;
    }
    get verticalCenter() {
        return this.position.y - this.size.y / 2;
    }
    set verticalCenter(v) {
        this.position.y = v + this.size.y / 2;
    }
}
exports.Actor = Actor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zZXJ2ZXIvZ2FtZW9iamVjdHMvQWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBc0M7QUFFdEM7SUFJSSxZQUFtQixPQUFPLElBQUksYUFBSyxFQUFFLEVBQVMsV0FBVyxJQUFJLGFBQUssRUFBRTtRQUFqRCxTQUFJLEdBQUosSUFBSSxDQUFjO1FBQVMsYUFBUSxHQUFSLFFBQVEsQ0FBYztRQUY3RCxhQUFRLEdBQUcsSUFBSSxhQUFLLEVBQUUsQ0FBQztJQUk5QixDQUFDO0lBRU0sU0FBUztRQUNaLE9BQU87WUFDSCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDVCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDWixDQUFBO0lBQ0wsQ0FBQztJQUVELElBQVcsS0FBSztRQUNaLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUNELElBQVcsS0FBSyxDQUFDLENBQUM7UUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQVcsTUFBTTtRQUNiLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUNELElBQVcsTUFBTSxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQVcsQ0FBQztRQUNSLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUNELElBQVcsQ0FBQyxDQUFDLENBQUM7UUFDVixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQVcsQ0FBQztRQUNSLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUNELElBQVcsQ0FBQyxDQUFDLENBQUM7UUFDVixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNYLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUNELElBQVcsSUFBSSxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELElBQVcsS0FBSztRQUNaLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFDRCxJQUFXLEtBQUssQ0FBQyxDQUFDO1FBQ2QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsSUFBVyxHQUFHO1FBQ1YsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3pDLENBQUM7SUFDRCxJQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ1osSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdEMsQ0FBQztJQUVELElBQVcsTUFBTTtRQUNiLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUNELElBQVcsTUFBTSxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQVcsZ0JBQWdCO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUNELElBQVcsZ0JBQWdCLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQVcsY0FBYztRQUNyQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBQ0QsSUFBVyxjQUFjLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFDLENBQUM7Q0FFSjtBQXJGRCxzQkFxRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb2ludCB9IGZyb20gXCIuLi9jb3JlL1BvaW50XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQWN0b3Ige1xyXG5cclxuICAgIHB1YmxpYyB2ZWxvY2l0eSA9IG5ldyBQb2ludCgpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBzaXplID0gbmV3IFBvaW50KCksIHB1YmxpYyBwb3NpdGlvbiA9IG5ldyBQb2ludCgpKSB7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNlcmlhbGl6ZSgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB4OiB0aGlzLngsXHJcbiAgICAgICAgICAgIHk6IHRoaXMueSxcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCB3aWR0aCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zaXplLng7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IHdpZHRoKHYpIHtcclxuICAgICAgICB0aGlzLnNpemUueCA9IHY7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBnZXQgaGVpZ2h0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNpemUueTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgaGVpZ2h0KHYpIHtcclxuICAgICAgICB0aGlzLnNpemUueSA9IHY7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCB4KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLng7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IHgodikge1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24ueCA9IHY7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCB5KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLnk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IHkodikge1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24ueSA9IHY7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBsZWZ0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLnggLSB0aGlzLndpZHRoIC8gMjtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgbGVmdCh2KSB7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi54ID0gdiArIHRoaXMud2lkdGggLyAyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgcmlnaHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb24ueCArIHRoaXMuc2l6ZS54IC8gMjtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgcmlnaHQodikge1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24ueCA9IHYgLSB0aGlzLnNpemUueCAvIDI7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBnZXQgdG9wKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLnkgLSB0aGlzLmhlaWdodDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgdG9wKHYpIHtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uLnkgPSB2ICsgdGhpcy5oZWlnaHQ7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBnZXQgYm90dG9tKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLnk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IGJvdHRvbSh2KSB7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ID0gdjtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHVibGljIGdldCBob3Jpem9udGFsQ2VudGVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uLng7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IGhvcml6b250YWxDZW50ZXIodikge1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24ueCA9IHY7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHB1YmxpYyBnZXQgdmVydGljYWxDZW50ZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb24ueSAtIHRoaXMuc2l6ZS55IC8gMjtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgdmVydGljYWxDZW50ZXIodikge1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24ueSA9IHYgKyB0aGlzLnNpemUueSAvIDI7XHJcbiAgICB9XHJcblxyXG59Il19