"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Actor_1 = require("./Actor");
const WorldMap_1 = require("./WorldMap");
const Point_1 = require("../core/Point");
class Player extends Actor_1.Actor {
    constructor() {
        super(...arguments);
        this.tag = "player";
        this.grounded = false;
        this.climbing = true;
    }
    update(state, controls) {
        if (this.grounded)
            this.climbing = false;
        if (!this.climbing) {
            this.velocity.y += 0.78;
            if (controls.jump && this.grounded) {
                this.velocity.y = -12;
            }
            if (controls.left) {
                this.velocity.x = -5;
            }
            else if (controls.right) {
                this.velocity.x = 5;
            }
            else {
                this.velocity.x = 0;
            }
            if (controls.up && state.world.isOnLadder(this)) {
                this.velocity.x = 0;
                this.velocity.y = 0;
                this.climbing = true;
                this.horizontalCenter = Math.floor(this.horizontalCenter / WorldMap_1.TILE_SIZE) * WorldMap_1.TILE_SIZE + WorldMap_1.TILE_SIZE / 2;
            }
        }
        if (this.climbing) {
            this.climbingUpdate(state, controls);
        }
        let move = state.world.move(this);
        this.grounded = move.collisions[1] === 1;
        if (move.collisions[0] !== 0) {
            this.velocity.x = 0;
        }
        if (move.collisions[1] !== 0) {
            this.velocity.y = 0;
        }
        let oldPosition = this.position;
        this.position = move.position.offset(this.width / 2, this.height);
        if (this.climbing && !state.world.isOnLadder(this) && this.velocity.y < 0) {
            if (!controls.left && !controls.right) {
                this.position = new Point_1.Point(oldPosition.x, Math.floor(oldPosition.y / WorldMap_1.TILE_SIZE) * WorldMap_1.TILE_SIZE + 1);
            }
            else {
                this.position = new Point_1.Point(this.position.x, Math.ceil(this.position.y / WorldMap_1.TILE_SIZE) * WorldMap_1.TILE_SIZE - 1);
                this.velocity.y = -8.5;
                this.climbing = false;
            }
        }
        return this;
    }
    climbingUpdate(state, controls) {
        if (!state.world.isOnLadder(this)) {
            this.climbing = false;
        }
        if (controls.up) {
            this.velocity.y = -5;
        }
        else if (controls.down) {
            this.velocity.y = 5;
        }
        else {
            this.velocity.y = 0;
        }
        if (controls.jump) {
            if (controls.down) {
                this.velocity.y = 0;
            }
            else {
                if (!controls.up) {
                    this.velocity.y = -8;
                }
            }
            this.climbing = false;
        }
        if (this.grounded) {
            this.climbing = false;
        }
    }
}
exports.Player = Player;
//# sourceMappingURL=data:application/json;base64,