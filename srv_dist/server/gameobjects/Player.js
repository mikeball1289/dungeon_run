"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Actor_1 = require("./Actor");
const WorldMap_1 = require("./WorldMap");
class Player extends Actor_1.Actor {
    constructor() {
        super(...arguments);
        this.tag = "player";
        this.grounded = false;
        this.climbing = true;
    }
    update(state, controls) {
        if (this.grounded)
            this.climbing = false;
        if (!this.climbing) {
            this.velocity.y += 0.78;
            if (controls.jump && this.grounded) {
                this.velocity.y = -12;
            }
            if (controls.left) {
                this.velocity.x = -5;
            }
            else if (controls.right) {
                this.velocity.x = 5;
            }
            else {
                this.velocity.x = 0;
            }
            if (controls.up && state.world.isOnLadder(this)) {
                this.velocity.x = 0;
                this.velocity.y = 0;
                this.climbing = true;
                this.horizontalCenter = Math.floor(this.horizontalCenter / WorldMap_1.TILE_SIZE) * WorldMap_1.TILE_SIZE + WorldMap_1.TILE_SIZE / 2;
            }
        }
        if (this.climbing) {
            this.climbingUpdate(state, controls);
        }
        let move = state.world.move(this);
        this.grounded = move.collisions[1] === 1;
        if (move.collisions[0] !== 0) {
            this.velocity.x = 0;
        }
        if (move.collisions[1] !== 0) {
            this.velocity.y = 0;
        }
        this.position = move.position.offset(this.width / 2, this.height);
        return this;
    }
    climbingUpdate(state, controls) {
        if (!state.world.isOnLadder(this)) {
            this.climbing = false;
        }
        if (controls.up) {
            this.velocity.y = -5;
        }
        else if (controls.down) {
            this.velocity.y = 5;
        }
        else {
            this.velocity.y = 0;
        }
        if (controls.jump) {
            if (controls.down) {
                this.velocity.y = 0;
            }
            else {
                if (!controls.up) {
                    this.velocity.y = -8;
                }
            }
            this.climbing = false;
        }
        if (this.grounded) {
            this.climbing = false;
        }
    }
}
exports.Player = Player;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGxheWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc2VydmVyL2dhbWVvYmplY3RzL1BsYXllci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLG1DQUFnQztBQUNoQyx5Q0FBdUM7QUFFdkMsWUFBb0IsU0FBUSxhQUFLO0lBQWpDOztRQUNXLFFBQUcsR0FBRyxRQUFRLENBQUM7UUFDZixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLGFBQVEsR0FBRyxJQUFJLENBQUM7SUFtRTNCLENBQUM7SUFqRVUsTUFBTSxDQUFDLEtBQWdCLEVBQUUsUUFBcUI7UUFDakQsSUFBSSxJQUFJLENBQUMsUUFBUTtZQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBRXpDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2hCLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQztZQUV4QixJQUFJLFFBQVEsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7YUFDekI7WUFDRCxJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDeEI7aUJBQU0sSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFO2dCQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDdkI7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3ZCO1lBQ0QsSUFBSSxRQUFRLENBQUMsRUFBRSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUM3QyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7Z0JBQ3JCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxvQkFBUyxDQUFDLEdBQUcsb0JBQVMsR0FBRyxvQkFBUyxHQUFHLENBQUMsQ0FBQzthQUNyRztTQUNKO1FBRUQsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDeEM7UUFFRCxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdkI7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsRSxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU8sY0FBYyxDQUFDLEtBQWdCLEVBQUUsUUFBcUI7UUFDMUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9CLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1NBQ3pCO1FBQ0QsSUFBSSxRQUFRLENBQUMsRUFBRSxFQUFFO1lBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdkI7UUFDRCxJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUU7WUFDZixJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3ZCO2lCQUFNO2dCQUNILElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFO29CQUNkLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUN4QjthQUNKO1lBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7U0FDekI7UUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDZixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztTQUN6QjtJQUNMLENBQUM7Q0FDSjtBQXRFRCx3QkFzRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbWljT2JqZWN0IH0gZnJvbSBcIi4uL0R5bmFtaWNPYmplY3RcIlxyXG5pbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tIFwiLi4vR2FtZVN0YXRlXCI7XHJcbmltcG9ydCB7IENvbnRyb2xQYWNrIH0gZnJvbSBcIi4uL0NvbnRyb2xQYWNrXCI7XHJcbmltcG9ydCB7IEFjdG9yIH0gZnJvbSBcIi4vQWN0b3JcIjtcclxuaW1wb3J0IHsgVElMRV9TSVpFIH0gZnJvbSBcIi4vV29ybGRNYXBcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQbGF5ZXIgZXh0ZW5kcyBBY3RvciBpbXBsZW1lbnRzIER5bmFtaWNPYmplY3Q8R2FtZVN0YXRlLCBDb250cm9sUGFjaz4ge1xyXG4gICAgcHVibGljIHRhZyA9IFwicGxheWVyXCI7XHJcbiAgICBwdWJsaWMgZ3JvdW5kZWQgPSBmYWxzZTtcclxuICAgIHB1YmxpYyBjbGltYmluZyA9IHRydWU7XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZShzdGF0ZTogR2FtZVN0YXRlLCBjb250cm9sczogQ29udHJvbFBhY2spIHtcclxuICAgICAgICBpZiAodGhpcy5ncm91bmRlZCkgdGhpcy5jbGltYmluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuY2xpbWJpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy52ZWxvY2l0eS55ICs9IDAuNzg7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoY29udHJvbHMuanVtcCAmJiB0aGlzLmdyb3VuZGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZlbG9jaXR5LnkgPSAtMTI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNvbnRyb2xzLmxlZnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmVsb2NpdHkueCA9IC01O1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRyb2xzLnJpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZlbG9jaXR5LnggPSA1O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52ZWxvY2l0eS54ID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY29udHJvbHMudXAgJiYgc3RhdGUud29ybGQuaXNPbkxhZGRlcih0aGlzKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52ZWxvY2l0eS54ID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMudmVsb2NpdHkueSA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsaW1iaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaG9yaXpvbnRhbENlbnRlciA9IE1hdGguZmxvb3IodGhpcy5ob3Jpem9udGFsQ2VudGVyIC8gVElMRV9TSVpFKSAqIFRJTEVfU0laRSArIFRJTEVfU0laRSAvIDI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNsaW1iaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xpbWJpbmdVcGRhdGUoc3RhdGUsIGNvbnRyb2xzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IG1vdmUgPSBzdGF0ZS53b3JsZC5tb3ZlKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZ3JvdW5kZWQgPSBtb3ZlLmNvbGxpc2lvbnNbMV0gPT09IDE7XHJcbiAgICAgICAgaWYgKG1vdmUuY29sbGlzaW9uc1swXSAhPT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnZlbG9jaXR5LnggPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobW92ZS5jb2xsaXNpb25zWzFdICE9PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmVsb2NpdHkueSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBtb3ZlLnBvc2l0aW9uLm9mZnNldCh0aGlzLndpZHRoIC8gMiwgdGhpcy5oZWlnaHQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2xpbWJpbmdVcGRhdGUoc3RhdGU6IEdhbWVTdGF0ZSwgY29udHJvbHM6IENvbnRyb2xQYWNrKSB7XHJcbiAgICAgICAgaWYgKCFzdGF0ZS53b3JsZC5pc09uTGFkZGVyKHRoaXMpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xpbWJpbmcgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbnRyb2xzLnVwKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmVsb2NpdHkueSA9IC01O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY29udHJvbHMuZG93bikge1xyXG4gICAgICAgICAgICB0aGlzLnZlbG9jaXR5LnkgPSA1O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudmVsb2NpdHkueSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb250cm9scy5qdW1wKSB7XHJcbiAgICAgICAgICAgIGlmIChjb250cm9scy5kb3duKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZlbG9jaXR5LnkgPSAwO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjb250cm9scy51cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmVsb2NpdHkueSA9IC04O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY2xpbWJpbmcgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZ3JvdW5kZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jbGltYmluZyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==