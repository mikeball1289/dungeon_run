"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Juggler {
    constructor(fps) {
        this.fps = fps;
        this.enterFrameFunctions = [];
        this.interFrameTime = 1000 / fps;
        this.schedule = Date.now() + this.interFrameTime;
        let tick = () => {
            this.enterFrameFunctions.forEach(([fn, ctx]) => fn.call(ctx));
            this.schedule += this.interFrameTime;
            let timeout = this.schedule - Date.now();
            if (timeout < 2) {
                timeout = 2;
                this.schedule = Date.now() + this.interFrameTime;
            }
            setTimeout(tick, this.schedule - Date.now());
        };
        setTimeout(tick, this.interFrameTime);
    }
    add(fn, context) {
        if (this.has(fn, context) < 0) {
            this.enterFrameFunctions.push([fn, context]);
        }
    }
    remove(fn, context) {
        let idx = this.has(fn, context);
        if (idx >= 0) {
            this.enterFrameFunctions.splice(idx, 1);
        }
    }
    has(fn, context) {
        for (let [i, oef] of enumerate(this.enterFrameFunctions)) {
            if (oef[0] === fn && oef[1] === context)
                return i;
        }
        return -1;
    }
    afterFrames(numFrames, fn, context) {
        let wrapper = () => {
            numFrames--;
            if (numFrames <= 0) {
                fn.call(context);
                this.remove(wrapper);
            }
        };
        this.add(wrapper);
    }
}
exports.Juggler = Juggler;
function* enumerate(arr) {
    let i = 0;
    for (let el of arr) {
        yield [i++, el];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSnVnZ2xlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlcnZlci9jb3JlL0p1Z2dsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtJQUtJLFlBQW9CLEdBQVc7UUFBWCxRQUFHLEdBQUgsR0FBRyxDQUFRO1FBSnZCLHdCQUFtQixHQUEwQixFQUFFLENBQUM7UUFLcEQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDakQsSUFBSSxJQUFJLEdBQUcsR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFFLENBQUM7WUFDaEUsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDO1lBRXJDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3pDLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtnQkFDYixPQUFPLEdBQUcsQ0FBQyxDQUFDO2dCQUNaLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7YUFDcEQ7WUFDRCxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDakQsQ0FBQyxDQUFDO1FBRUYsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVNLEdBQUcsQ0FBQyxFQUFjLEVBQUUsT0FBYTtRQUNwQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMzQixJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDaEQ7SUFDTCxDQUFDO0lBRU0sTUFBTSxDQUFDLEVBQWMsRUFBRSxPQUFhO1FBQ3ZDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2hDLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRTtZQUNWLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzNDO0lBQ0wsQ0FBQztJQUVNLEdBQUcsQ0FBQyxFQUFjLEVBQUUsT0FBYTtRQUNwQyxLQUFLLElBQUksQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO1lBQ3RELElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssT0FBTztnQkFBRSxPQUFPLENBQUMsQ0FBQztTQUNyRDtRQUNELE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDZCxDQUFDO0lBRU0sV0FBVyxDQUFDLFNBQWlCLEVBQUUsRUFBYyxFQUFFLE9BQWE7UUFDL0QsSUFBSSxPQUFPLEdBQUcsR0FBRyxFQUFFO1lBQ2YsU0FBUyxFQUFHLENBQUM7WUFDYixJQUFJLFNBQVMsSUFBSSxDQUFDLEVBQUU7Z0JBQ2hCLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ2pCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDeEI7UUFDTCxDQUFDLENBQUM7UUFDRixJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RCLENBQUM7Q0FDSjtBQXJERCwwQkFxREM7QUFHRCxRQUFRLENBQUMsV0FBYyxHQUFRO0lBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLEtBQUssSUFBSSxFQUFFLElBQUksR0FBRyxFQUFFO1FBQ2hCLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUNuQjtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgSnVnZ2xlciB7XHJcbiAgICBwcml2YXRlIGVudGVyRnJhbWVGdW5jdGlvbnM6IFsoKCkgPT4gdm9pZCksIGFueV1bXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBzY2hlZHVsZTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBpbnRlckZyYW1lVGltZTogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZnBzOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmludGVyRnJhbWVUaW1lID0gMTAwMCAvIGZwcztcclxuICAgICAgICB0aGlzLnNjaGVkdWxlID0gRGF0ZS5ub3coKSArIHRoaXMuaW50ZXJGcmFtZVRpbWU7XHJcbiAgICAgICAgbGV0IHRpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZW50ZXJGcmFtZUZ1bmN0aW9ucy5mb3JFYWNoKCAoW2ZuLCBjdHhdKSA9PiBmbi5jYWxsKGN0eCkgKTtcclxuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSArPSB0aGlzLmludGVyRnJhbWVUaW1lO1xyXG5cclxuICAgICAgICAgICAgbGV0IHRpbWVvdXQgPSB0aGlzLnNjaGVkdWxlIC0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgaWYgKHRpbWVvdXQgPCAyKSB7XHJcbiAgICAgICAgICAgICAgICB0aW1lb3V0ID0gMjtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUgPSBEYXRlLm5vdygpICsgdGhpcy5pbnRlckZyYW1lVGltZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRpY2ssIHRoaXMuc2NoZWR1bGUgLSBEYXRlLm5vdygpKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzZXRUaW1lb3V0KHRpY2ssIHRoaXMuaW50ZXJGcmFtZVRpbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGQoZm46ICgpID0+IHZvaWQsIGNvbnRleHQ/OiBhbnkpIHtcclxuICAgICAgICBpZiAodGhpcy5oYXMoZm4sIGNvbnRleHQpIDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLmVudGVyRnJhbWVGdW5jdGlvbnMucHVzaChbZm4sIGNvbnRleHRdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZShmbjogKCkgPT4gdm9pZCwgY29udGV4dD86IGFueSkge1xyXG4gICAgICAgIGxldCBpZHggPSB0aGlzLmhhcyhmbiwgY29udGV4dCk7XHJcbiAgICAgICAgaWYgKGlkeCA+PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW50ZXJGcmFtZUZ1bmN0aW9ucy5zcGxpY2UoaWR4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGhhcyhmbjogKCkgPT4gdm9pZCwgY29udGV4dD86IGFueSkge1xyXG4gICAgICAgIGZvciAobGV0IFtpLCBvZWZdIG9mIGVudW1lcmF0ZSh0aGlzLmVudGVyRnJhbWVGdW5jdGlvbnMpKSB7XHJcbiAgICAgICAgICAgIGlmIChvZWZbMF0gPT09IGZuICYmIG9lZlsxXSA9PT0gY29udGV4dCkgcmV0dXJuIGk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWZ0ZXJGcmFtZXMobnVtRnJhbWVzOiBudW1iZXIsIGZuOiAoKSA9PiB2b2lkLCBjb250ZXh0PzogYW55KSB7XHJcbiAgICAgICAgbGV0IHdyYXBwZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIG51bUZyYW1lcyAtLTtcclxuICAgICAgICAgICAgaWYgKG51bUZyYW1lcyA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBmbi5jYWxsKGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUod3JhcHBlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuYWRkKHdyYXBwZXIpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24qIGVudW1lcmF0ZTxUPihhcnI6IFRbXSk6IEl0ZXJhYmxlPFtudW1iZXIsIFRdPiB7XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBmb3IgKGxldCBlbCBvZiBhcnIpIHtcclxuICAgICAgICB5aWVsZCBbaSsrLCBlbF07XHJcbiAgICB9XHJcbn0iXX0=