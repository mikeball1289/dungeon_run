"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Player_1 = require("./gameobjects/Player");
const WorldMap_1 = require("./gameobjects/WorldMap");
const DunGen_1 = require("../common/DunGen");
const fs_1 = require("fs");
const TemplateRoom_1 = require("../common/TemplateRoom");
const crypto = require("crypto");
const Point_1 = require("./core/Point");
const utils_1 = require("../common/utils");
const emptyControls = {
    left: false,
    right: false,
    up: false,
    down: false,
    jump: false,
};
const templates = JSON.parse(fs_1.readFileSync(__dirname + "/../../templates.json", "ascii")).map((e) => new TemplateRoom_1.TemplateRoom(e));
class GameState {
    constructor() {
        this.numPlayers = 0;
        this.players = {};
        this.world = new WorldMap_1.WorldMap(DunGen_1.DunGen(templates, { width: 50, height: 50, seed: crypto.randomBytes(24).toString("base64") }));
        outerloop: for (let y = 0; y < this.world.dungeon.height; y++) {
            for (let x = 0; x < this.world.dungeon.width; x++) {
                if (this.world.dungeon.tiles.get(x, y) === DunGen_1.ETiles.EMPTY) {
                    this.spawnPoint = new Point_1.Point(x * WorldMap_1.TILE_SIZE, y * WorldMap_1.TILE_SIZE);
                    console.log(this.spawnPoint);
                    break outerloop;
                }
            }
        }
    }
    addPlayer(id) {
        this.players[id] = {
            player: new Player_1.Player(new Point_1.Point(WorldMap_1.TILE_SIZE - 7, WorldMap_1.TILE_SIZE - 7), this.spawnPoint.offset(WorldMap_1.TILE_SIZE / 2, WorldMap_1.TILE_SIZE - 2)),
            controls: Object.assign({}, emptyControls),
        };
    }
    removePlayer(id) {
        delete this.players[id];
    }
    update() {
        for (let id of utils_1.Keys(this.players)) {
            this.players[id].player.update(this, this.players[id].controls);
        }
        return this;
    }
    serialize() {
        let players = {};
        for (let id of utils_1.Keys(this.players)) {
            players[id] = this.players[id].player.serialize();
        }
        return { players, timestamp: Date.now() };
    }
}
exports.GameState = GameState;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2FtZVN0YXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc2VydmVyL0dhbWVTdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUE4QztBQUM5QyxxREFBNkQ7QUFDN0QsNkNBQWtEO0FBQ2xELDJCQUFrQztBQUNsQyx5REFBc0Q7QUFDdEQsaUNBQWlDO0FBQ2pDLHdDQUFxQztBQUNyQywyQ0FBdUM7QUFFdkMsTUFBTSxhQUFhLEdBQWE7SUFDNUIsSUFBSSxFQUFFLEtBQUs7SUFDWCxLQUFLLEVBQUUsS0FBSztJQUNaLEVBQUUsRUFBRSxLQUFLO0lBQ1QsSUFBSSxFQUFFLEtBQUs7SUFDWCxJQUFJLEVBQUUsS0FBSztDQUNkLENBQUM7QUFDRixNQUFNLFNBQVMsR0FBbUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBWSxDQUFDLFNBQVMsR0FBRyx1QkFBdUIsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBRSxDQUFDLENBQWEsRUFBRSxFQUFFLENBQUMsSUFBSSwyQkFBWSxDQUFDLENBQUMsQ0FBQyxDQUFFLENBQUM7QUFFdko7SUFNSTtRQUhPLGVBQVUsR0FBVyxDQUFDLENBQUM7UUFJMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLG1CQUFRLENBQUMsZUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBRSxDQUFDLENBQUM7UUFDMUgsU0FBUyxFQUNULEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFHLEVBQUU7WUFDakQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUcsRUFBRTtnQkFDaEQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxlQUFNLENBQUMsS0FBSyxFQUFFO29CQUNyRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksYUFBSyxDQUFDLENBQUMsR0FBRyxvQkFBUyxFQUFFLENBQUMsR0FBRyxvQkFBUyxDQUFDLENBQUM7b0JBQzFELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUM3QixNQUFNLFNBQVMsQ0FBQztpQkFDbkI7YUFDSjtTQUNKO0lBQ0wsQ0FBQztJQUVNLFNBQVMsQ0FBQyxFQUFVO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUc7WUFDZixNQUFNLEVBQUUsSUFBSSxlQUFNLENBQUMsSUFBSSxhQUFLLENBQUMsb0JBQVMsR0FBRyxDQUFDLEVBQUUsb0JBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxvQkFBUyxHQUFHLENBQUMsRUFBRSxvQkFBUyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2pILFFBQVEsb0JBQU8sYUFBYSxDQUFFO1NBQ2pDLENBQUM7SUFDTixDQUFDO0lBRU0sWUFBWSxDQUFDLEVBQVU7UUFDMUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFTSxNQUFNO1FBQ1QsS0FBSyxJQUFJLEVBQUUsSUFBSSxZQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQy9CLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNuRTtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxTQUFTO1FBQ1osSUFBSSxPQUFPLEdBQW1CLEVBQUUsQ0FBQztRQUNqQyxLQUFLLElBQUksRUFBRSxJQUFJLFlBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDL0IsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ3JEO1FBRUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDOUMsQ0FBQztDQUNKO0FBL0NELDhCQStDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBsYXllciB9IGZyb20gXCIuL2dhbWVvYmplY3RzL1BsYXllclwiO1xyXG5pbXBvcnQgeyBXb3JsZE1hcCwgVElMRV9TSVpFIH0gZnJvbSBcIi4vZ2FtZW9iamVjdHMvV29ybGRNYXBcIjtcclxuaW1wb3J0IHsgRHVuR2VuLCBFVGlsZXMgfSBmcm9tIFwiLi4vY29tbW9uL0R1bkdlblwiO1xyXG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tIFwiZnNcIjtcclxuaW1wb3J0IHsgVGVtcGxhdGVSb29tIH0gZnJvbSBcIi4uL2NvbW1vbi9UZW1wbGF0ZVJvb21cIjtcclxuaW1wb3J0ICogYXMgY3J5cHRvIGZyb20gXCJjcnlwdG9cIjtcclxuaW1wb3J0IHsgUG9pbnQgfSBmcm9tIFwiLi9jb3JlL1BvaW50XCI7XHJcbmltcG9ydCB7IEtleXMgfSBmcm9tIFwiLi4vY29tbW9uL3V0aWxzXCI7XHJcblxyXG5jb25zdCBlbXB0eUNvbnRyb2xzOiBDb250cm9scyA9IHtcclxuICAgIGxlZnQ6IGZhbHNlLFxyXG4gICAgcmlnaHQ6IGZhbHNlLFxyXG4gICAgdXA6IGZhbHNlLFxyXG4gICAgZG93bjogZmFsc2UsXHJcbiAgICBqdW1wOiBmYWxzZSxcclxufTtcclxuY29uc3QgdGVtcGxhdGVzOiBUZW1wbGF0ZVJvb21bXSA9IEpTT04ucGFyc2UocmVhZEZpbGVTeW5jKF9fZGlybmFtZSArIFwiLy4uLy4uL3RlbXBsYXRlcy5qc29uXCIsIFwiYXNjaWlcIikpLm1hcCggKGU6IG51bWJlcltdW10pID0+IG5ldyBUZW1wbGF0ZVJvb20oZSkgKTtcclxuXHJcbmV4cG9ydCBjbGFzcyBHYW1lU3RhdGUge1xyXG4gICAgcHVibGljIHBsYXllcnM6IHsgW2lkOiBzdHJpbmddOiB7IHBsYXllcjogUGxheWVyLCBjb250cm9sczogQ29udHJvbHMgfSB9O1xyXG4gICAgcHVibGljIHdvcmxkOiBXb3JsZE1hcDtcclxuICAgIHB1YmxpYyBudW1QbGF5ZXJzOiBudW1iZXIgPSAwO1xyXG4gICAgcHVibGljIHNwYXduUG9pbnQ6IFBvaW50O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMucGxheWVycyA9IHt9O1xyXG4gICAgICAgIHRoaXMud29ybGQgPSBuZXcgV29ybGRNYXAoRHVuR2VuKHRlbXBsYXRlcywgeyB3aWR0aDogNTAsIGhlaWdodDogNTAsIHNlZWQ6IGNyeXB0by5yYW5kb21CeXRlcygyNCkudG9TdHJpbmcoXCJiYXNlNjRcIikgfSApKTtcclxuICAgICAgICBvdXRlcmxvb3A6XHJcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLndvcmxkLmR1bmdlb24uaGVpZ2h0OyB5ICsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy53b3JsZC5kdW5nZW9uLndpZHRoOyB4ICsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy53b3JsZC5kdW5nZW9uLnRpbGVzLmdldCh4LCB5KSA9PT0gRVRpbGVzLkVNUFRZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGF3blBvaW50ID0gbmV3IFBvaW50KHggKiBUSUxFX1NJWkUsIHkgKiBUSUxFX1NJWkUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuc3Bhd25Qb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgb3V0ZXJsb29wO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRQbGF5ZXIoaWQ6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMucGxheWVyc1tpZF0gPSB7XHJcbiAgICAgICAgICAgIHBsYXllcjogbmV3IFBsYXllcihuZXcgUG9pbnQoVElMRV9TSVpFIC0gNywgVElMRV9TSVpFIC0gNyksIHRoaXMuc3Bhd25Qb2ludC5vZmZzZXQoVElMRV9TSVpFIC8gMiwgVElMRV9TSVpFIC0gMikpLFxyXG4gICAgICAgICAgICBjb250cm9sczogeyAuLi5lbXB0eUNvbnRyb2xzIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlUGxheWVyKGlkOiBzdHJpbmcpIHtcclxuICAgICAgICBkZWxldGUgdGhpcy5wbGF5ZXJzW2lkXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKCk6IEdhbWVTdGF0ZSB7XHJcbiAgICAgICAgZm9yIChsZXQgaWQgb2YgS2V5cyh0aGlzLnBsYXllcnMpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGxheWVyc1tpZF0ucGxheWVyLnVwZGF0ZSh0aGlzLCB0aGlzLnBsYXllcnNbaWRdLmNvbnRyb2xzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNlcmlhbGl6ZSgpOiBHYW1lU3RhdGVQYWNrZXQge1xyXG4gICAgICAgIGxldCBwbGF5ZXJzOiBJUGxheWVyc1BhY2tldCA9IHt9O1xyXG4gICAgICAgIGZvciAobGV0IGlkIG9mIEtleXModGhpcy5wbGF5ZXJzKSkge1xyXG4gICAgICAgICAgICBwbGF5ZXJzW2lkXSA9IHRoaXMucGxheWVyc1tpZF0ucGxheWVyLnNlcmlhbGl6ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4geyBwbGF5ZXJzLCB0aW1lc3RhbXA6IERhdGUubm93KCkgfTtcclxuICAgIH1cclxufSJdfQ==