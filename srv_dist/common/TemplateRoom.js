"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Map2D_1 = require("./Map2D");
var Direction;
(function (Direction) {
    Direction[Direction["TOP"] = 2] = "TOP";
    Direction[Direction["BOTTOM"] = 3] = "BOTTOM";
    Direction[Direction["LEFT"] = 4] = "LEFT";
    Direction[Direction["RIGHT"] = 5] = "RIGHT";
})(Direction = exports.Direction || (exports.Direction = {}));
class TemplateRoom {
    constructor(data) {
        this.tiles = new Map2D_1.Map2D();
        this.doorways = [];
        this.doorways[Direction.TOP] = -1;
        this.doorways[Direction.BOTTOM] = -1;
        this.doorways[Direction.LEFT] = -1;
        this.doorways[Direction.RIGHT] = -1;
        this.width = data[0].length;
        this.height = data.length;
        for (let i = 0; i < this.width; i++) {
            for (let j = 0; j < this.height; j++) {
                this.tiles.set(i, j, data[j][i]);
            }
        }
        for (let i = 0; i < this.width; i++) {
            if (this.tiles.get(i, 0) === 0) {
                this.doorways[Direction.TOP] = i;
                this.tiles.set(i, 0, Direction.TOP);
            }
            if (this.tiles.get(i, this.height - 1) === 0) {
                this.doorways[Direction.BOTTOM] = i;
                this.tiles.set(i, this.height - 1, Direction.BOTTOM);
            }
        }
        for (let i = 0; i < this.height; i++) {
            if (this.tiles.get(0, i) === 0) {
                this.doorways[Direction.LEFT] = i;
                this.tiles.set(0, i, Direction.LEFT);
            }
            if (this.tiles.get(this.width - 1, i) === 0) {
                this.doorways[Direction.RIGHT] = i;
                this.tiles.set(this.width - 1, i, Direction.RIGHT);
            }
        }
    }
    toString() {
        let repr = "";
        for (let j = 0; j < this.height; j++) {
            for (let i = 0; i < this.width; i++) {
                switch (this.tiles.get(i, j)) {
                    case 1:
                        repr += "██";
                        break;
                    case 2:
                        repr += "^^";
                        break;
                    case 3:
                        repr += "vv";
                        break;
                    case 4:
                        repr += "<<";
                        break;
                    case 5:
                        repr += ">>";
                        break;
                    default: repr += "  ";
                }
            }
            repr += "\n";
        }
        return repr;
    }
}
exports.TemplateRoom = TemplateRoom;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVtcGxhdGVSb29tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vY29tbW9uL1RlbXBsYXRlUm9vbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFnQztBQUVoQyxJQUFZLFNBS1g7QUFMRCxXQUFZLFNBQVM7SUFDakIsdUNBQU8sQ0FBQTtJQUNQLDZDQUFVLENBQUE7SUFDVix5Q0FBUSxDQUFBO0lBQ1IsMkNBQVMsQ0FBQTtBQUNiLENBQUMsRUFMVyxTQUFTLEdBQVQsaUJBQVMsS0FBVCxpQkFBUyxRQUtwQjtBQUVEO0lBUUksWUFBWSxJQUFnQjtRQUpyQixVQUFLLEdBQUcsSUFBSSxhQUFLLEVBQVUsQ0FBQztRQUU1QixhQUFRLEdBQWEsRUFBRSxDQUFDO1FBRzNCLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUM1QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFHLEVBQUU7WUFDbEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFHLEVBQUU7Z0JBQ25D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QyxNQUFNO29CQUM1QixPQUFPLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDO2lCQUN6QjthQUNKO1lBQ0QsSUFBSSxJQUFJLElBQUksQ0FBQztTQUNoQjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Q0FDSjtBQTVERCxvQ0E0REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXAyRCB9IGZyb20gXCIuL01hcDJEXCI7XHJcblxyXG5leHBvcnQgZW51bSBEaXJlY3Rpb24ge1xyXG4gICAgVE9QID0gMixcclxuICAgIEJPVFRPTSA9IDMsXHJcbiAgICBMRUZUID0gNCxcclxuICAgIFJJR0hUID0gNSxcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRlbXBsYXRlUm9vbSB7XHJcbiAgICBcclxuICAgIHB1YmxpYyB3aWR0aDogbnVtYmVyO1xyXG4gICAgcHVibGljIGhlaWdodDogbnVtYmVyO1xyXG4gICAgcHVibGljIHRpbGVzID0gbmV3IE1hcDJEPG51bWJlcj4oKTtcclxuXHJcbiAgICBwdWJsaWMgZG9vcndheXM6IG51bWJlcltdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGF0YTogbnVtYmVyW11bXSkge1xyXG4gICAgICAgIHRoaXMuZG9vcndheXNbRGlyZWN0aW9uLlRPUF0gICAgICAgID0gLTE7XHJcbiAgICAgICAgdGhpcy5kb29yd2F5c1tEaXJlY3Rpb24uQk9UVE9NXSAgICAgPSAtMTtcclxuICAgICAgICB0aGlzLmRvb3J3YXlzW0RpcmVjdGlvbi5MRUZUXSAgICAgICA9IC0xO1xyXG4gICAgICAgIHRoaXMuZG9vcndheXNbRGlyZWN0aW9uLlJJR0hUXSAgICAgID0gLTE7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IGRhdGFbMF0ubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLndpZHRoOyBpICsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5oZWlnaHQ7IGogKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGlsZXMuc2V0KGksIGosIGRhdGFbal1baV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMud2lkdGg7IGkgKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudGlsZXMuZ2V0KGksIDApID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvb3J3YXlzW0RpcmVjdGlvbi5UT1BdID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGlsZXMuc2V0KGksIDAsIERpcmVjdGlvbi5UT1ApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbGVzLmdldChpLCB0aGlzLmhlaWdodCAtIDEpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvb3J3YXlzW0RpcmVjdGlvbi5CT1RUT01dID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGlsZXMuc2V0KGksIHRoaXMuaGVpZ2h0IC0gMSwgRGlyZWN0aW9uLkJPVFRPTSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmhlaWdodDsgaSArKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50aWxlcy5nZXQoMCwgaSkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9vcndheXNbRGlyZWN0aW9uLkxFRlRdID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGlsZXMuc2V0KDAsIGksIERpcmVjdGlvbi5MRUZUKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy50aWxlcy5nZXQodGhpcy53aWR0aCAtIDEsIGkpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvb3J3YXlzW0RpcmVjdGlvbi5SSUdIVF0gPSBpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aWxlcy5zZXQodGhpcy53aWR0aCAtIDEsIGksIERpcmVjdGlvbi5SSUdIVCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRvU3RyaW5nKCkge1xyXG4gICAgICAgIGxldCByZXByID0gXCJcIjtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuaGVpZ2h0OyBqICsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy53aWR0aDsgaSArKykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLnRpbGVzLmdldChpLCBqKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmVwciArPSBcIuKWiOKWiFwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJlcHIgKz0gXCJeXlwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJlcHIgKz0gXCJ2dlwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJlcHIgKz0gXCI8PFwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHJlcHIgKz0gXCI+PlwiOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXByICs9IFwiICBcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXByICs9IFwiXFxuXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXByO1xyXG4gICAgfVxyXG59Il19